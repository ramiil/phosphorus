Сервер
0. Инициализирует блокчейн из локальной БД или пустой(blockchain.py)
1. Синхронизируется(network.py)
1.1 Запрашивает у известных ему нод список других нод
1.2 Запрашивает у известных ему нод точное время
1.3 Сохраняет список нод в локальном хранилище
1.4 Выгружает с известных ему нод список блоков
2. Ожидает запросов(p2pserver.py)
2.1 При запросе /Time возвращает текущее время на сервере
2.2 При запросе /Nodes отдаёт все известные ему ноды
2.3 При запросе /Node?KEY отдаёт адрес ноды с ключом KEY
2.4 При запросе /Blocks?start=N&count=X отдаёт X блоков начиная с N
2.5 При запросе /Join?KEY=ADDR сохраняет в локальном хранилище ноду KEY с адресом ADDR
2.6 При запросе /Data получает последний известный набор данных(транзакций) для генерации блока. ВНИМАНИЕ! Набор данных автоматически содержит транзакцию на 1 коин запросившему(либо пулу).
2.7 При запросе /Validate?timestamp=X&nonce=Y [POST:Z] проверяет валидность блока под с таймстампом X, nonce Y и данными Z в теле запроса. 
Если блок валиден(хэш подходит под условия) то запускается рассылка нового блока известным нодам.

Майнер
0. Инициализирует блокчейн из локальной БД или пустой(blockchain.py)
1. Синхронизируется(network.py)
1.1 Запрашивает у известных ему нод список других нод
1.2 Запрашивает у известных ему нод точное время
1.3 Сохраняет список нод в локальном хранилище
1.4 Выгружает с известных ему нод список блоков
2. Майнит(miner.py)
2.1 Запрашивает /Data с нечетного количества случайных нод
2.2 Генерирует блок пока не найдёь валидный
2.3 Запрашивает /Validate?X=BASE64TEXT для своего блока

Кошелёк
0. Инициализирует блокчейн из локальной БД или пустой(blockchain.py)
1. Синхронизируется(network.py)
1.1 Запрашивает у известных ему нод список других нод
1.2 Запрашивает у известных ему нод точное время
1.3 Сохраняет список нод в локальном хранилище
1.4 Выгружает с известных ему нод список блоков
3. Генерирует запросы к нодам по команде пользователя(wallet.py)
4. Выполняет запросы к нодам(network.py)